---
import type { GetStaticPaths } from "astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list.response";

import MainLayout from "@layouts/MainLayout.astro";
import PokemonCard from "@components/pokemons/PokemonCard.astro";

export const getStaticPaths = (async () => {
	const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
	const { results } = (await resp.json()) as PokemonListResponse;

	// console.log("results: ", results);

	return results.map((pokemon) => {
		const { name, url } = pokemon;
		return {
			params: { name },
			props: { name, url },
		};
	});

	/*
    return [
		{
			params: { name: "bulbasaur" },
			props: { name: "bulbasaur", url: "https://pokeapi.co/api/v2/pokemon/1" },
		},
		{
			params: { name: "charmander" },
			props: { name: "charmander", url: "https://pokeapi.co/api/v2/pokemon/4" },
		},
		{
			params: { name: "squirtle" },
			props: { name: "squirtle", url: "https://pokeapi.co/api/v2/pokemon/7" },
		},
	];
    */
}) satisfies GetStaticPaths;

// Astro.params se utiliza en rutas dinámicas para acceder a los parámetros definidos en el nombre del archivo (por ejemplo, [name].astro), mientras que Astro.props se usa en componentes para recibir propiedades pasadas desde el componente padre
const { name } = Astro.params;
const { url } = Astro.props;

const id = url.split("/").at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
// console.log("id: ", id);
---

<MainLayout
	titulo=`Pokémon #${id}: ${ name.charAt(0).toUpperCase() + name.slice(1) }`
	description={`Información del Pokémon ${ name.charAt(0).toUpperCase() + name.slice(1) }`}
	image={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`}
>
	<section class="mt-10 mx-10 flex flex-col justify-center items-center">
		<div>
			<a
				href="javascript:history.back()"
				class="hover:underline text-xl text-blue-500">Regresar</a
			>
			<h1 class="text-5xl capitalize">{name}</h1>
			<p class="text-2xl">ID: {id}</p>
		</div>

		<!-- isBig = { true } es un buleano y es al ser booleano, solo basta con colocar isBig en las llaves -->
		<PokemonCard name={name} url={url} isBig />

		<audio controls class="mt-5">
			<source src={audioSrc} type="audio/ogg" />
			<p>Tu navegador no soporta el elemento de audio.</p>
		</audio>
	</section>
</MainLayout>

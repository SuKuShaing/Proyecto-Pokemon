---
import type { GetStaticPaths } from "astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list.response";

import MainLayout from "@layouts/MainLayout.astro";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import Title from "@/components/shared/Title.astro";

import { Icon } from "astro-icon/components";

export const getStaticPaths = (async () => {
	const resp = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
	const { results } = (await resp.json()) as PokemonListResponse;

	// console.log("results: ", results);

	return results.map((pokemon) => {
		const { name, url } = pokemon;
		return {
			params: { name },
			props: { name, url },
		};
	});

	/*
    return [
		{
			params: { name: "bulbasaur" },
			props: { name: "bulbasaur", url: "https://pokeapi.co/api/v2/pokemon/1" },
		},
		{
			params: { name: "charmander" },
			props: { name: "charmander", url: "https://pokeapi.co/api/v2/pokemon/4" },
		},
		{
			params: { name: "squirtle" },
			props: { name: "squirtle", url: "https://pokeapi.co/api/v2/pokemon/7" },
		},
	];
    */
}) satisfies GetStaticPaths;

// Astro.params se utiliza en rutas dinámicas para acceder a los parámetros definidos en el nombre del archivo (por ejemplo, [name].astro), mientras que Astro.props se usa en componentes para recibir propiedades pasadas desde el componente padre
const { name } = Astro.params;
const { url } = Astro.props;

const id = url.split("/").at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
// console.log("id: ", id);
---

<MainLayout
	titulo=`Pokémon #${id}: ${ name.charAt(0).toUpperCase() + name.slice(1) }`
	description={`Información del Pokémon ${name.charAt(0).toUpperCase() + name.slice(1)}`}
	image={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`}
>
	<section class="mt-10 mx-10 flex flex-col justify-center items-center">
		<div>
			<!-- <a
				href="javascript:history.back()"
				class="hover:underline text-xl text-blue-500">Regresar</a
			> -->
			<button
				onclick="history.back()"
				class="hover:underline text-xl text-blue-500">Regresar</button
			>
			<Title>{name}</Title>
			<div class="flex flex-row justify-between">
				<p class="text-2xl">ID: {id}</p>
				<!-- Los data-element pueden ser creados a voluntad no tienen límites y siempre guardan un string -->
				<!-- En el javascript debe ser recuperado un elemento dentro de data-element con metodo EtiquetaHTML.dataset.element -->
				<button
					id="btn-favorite"
					class="flex flex-row items-center"
					data-name={name}
					data-id={id}
				>
					<Icon name="empty-heart" size={30} data-empty class="text-red-700" />
					<Icon name="full-heart" size={30} data-full class="text-red-700 hidden" />
				</button>
			</div>
		</div>

		<!-- isBig = { true } es un buleano y es al ser booleano, solo basta con colocar isBig en las llaves -->
		<PokemonCard name={name} url={url} isBig />

		<audio controls class="mt-5">
			<source src={audioSrc} type="audio/ogg" />
			<p>Tu navegador no soporta el elemento de audio.</p>
		</audio>
	</section>
</MainLayout>

<script>
	import type { FavoritePokemon } from "@interfaces/favorite-pokemon.response";
	// se puede colocar TypeScript en los script de astro
	// interface FavoritePokemon {
	// 	name: string;
	// 	id: number;
	// }

	// Los script por defecto no se ejecutan cuando hay viewTransition
	// Además no se comparte información entre el script que está en tiempo de compilación y el script que se ejecuta en cliente
	// console.log(name, id)

	// se añade el evento astro:page-load para que se ejecute cuando se cargue la página, dado que la viewTransition le quita el evento DOMContentLoaded
	// y no se ejecuta el script que está en el cliente
	// existe astro:page-load, y ocurre cuando la página se carga por completo
	// además existe astro:before-preparation, astro:after-preparation, astro:before-swap, astro:after-swap

	/*
	document.addEventListener("astro:page-load", () => { // cuando entro a la página del Pokémon por primera vez se carga este listener al evento astro:page-load, entonces cada vez que se cargue cualquier página se ejecuta este código
		console.log("Hola astro:page-load");
	}, { once: true });
	// once en true, significa que solo se ejecuta una vez y luego no se ejecuta más
	*/

	const handlePageLoad = () => {
		// Obtenemos los favoritos del localStorage
		let favoritePokemons: FavoritePokemon[] = JSON.parse(
			localStorage.getItem("favorites") ?? "[]" // si no existe el localStorage, se inicializa como un array vacío
		)

		// Obtenemos el botón de favorito
		const btnFavorite = document.getElementById(
			"btn-favorite"
		) as HTMLButtonElement;

		// si no existe el botón, no se ejecuta el resto del código por lo tanto solo se ejecutará en la página de los Pokémones
		if (!btnFavorite) return;
		
		// Obtenemos el nombre y el id del Pokémon desde el botón de favorito
		const name = btnFavorite.dataset.name ?? '' as string;
		const id = btnFavorite.dataset.id ?? '' as string;

		// Obtenemos los iconos de corazón vacío y lleno
		const heartEmpty = btnFavorite.querySelector("[data-empty]") as HTMLElement;
		const heartFull = btnFavorite.querySelector("[data-full]") as HTMLElement;

		// Sí el pokémon ya está en la lista de favoritos, se muestra el corazón lleno y se oculta el vacío
		const isInFavorite = favoritePokemons.some((fav) => fav.name === name);
		if (isInFavorite) {
			heartEmpty.classList.toggle("hidden");
			heartFull.classList.toggle("hidden");
		}

		// Añade o quita el Pokémon de la lista de favoritos
		const toggleFavorite = () => {
			const isFavorite = favoritePokemons.some((fav) => fav.name === name); // verifica si el Pokémon ya está en la lista de favoritos, some devuelve true o false apenas si encuentra un elemento que cumpla la condición

			if ( isFavorite ) {
				// remover
				favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name); // retorna los pokemones que no tienen el mismo nombre que el que se está eliminando
			} else {
				// agregar
				favoritePokemons.push({ name, id: Number(id) });
			}

			localStorage.setItem("favorites", JSON.stringify(favoritePokemons));
		}
		
		// Cambia el estado del corazón al cargar al hacer click y ejecuta la función que usa el localStorage
		btnFavorite.addEventListener("click", () => {
			heartEmpty.classList.toggle("hidden");
			heartFull.classList.toggle("hidden");

			toggleFavorite();
		});
	}
	
	document.addEventListener("astro:page-load", handlePageLoad);
</script>

<style>
	@import "tailwindcss";

	#btn-favorite {
		@apply hover:animate-pulse;
	}
</style>
